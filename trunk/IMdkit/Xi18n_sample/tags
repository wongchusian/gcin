IC.c:ic_list	IC.c	/^static IC *ic_list = (IC *)NULL;$/
IC.c:free_list	IC.c	/^static IC *free_list = (IC *)NULL;$/
IC.c:NewIC	IC.c	/^*NewIC()$/
FindIC	IC.c	/^*FindIC(icid)$/
IC.c:DeleteIC	IC.c	/^DeleteIC(icid)$/
IC.c:Is	IC.c	/^static int Is(char *attr, XICAttribute *attr_list) {$/
IC.c:StoreIC	IC.c	/^StoreIC(rec, call_data)$/
CreateIC	IC.c	/^CreateIC(call_data)$/
DestroyIC	IC.c	/^DestroyIC(call_data)$/
SetIC	IC.c	/^SetIC(call_data)$/
GetIC	IC.c	/^GetIC(call_data)$/
PreeditAttributes	IC.h	/^} PreeditAttributes;$/
StatusAttributes	IC.h	/^} StatusAttributes;$/
IC	IC.h	/^} IC;$/
sampleIM.c:DEFAULT_IMNAME	sampleIM.c	37
sampleIM.c:DEFAULT_LOCALE	sampleIM.c	38
use_trigger	sampleIM.c	/^Bool use_trigger = True;	\/* Dynamic Event Flow is default *\/$/
use_offkey	sampleIM.c	/^Bool use_offkey = False;	\/* Register OFF Key for Dynamic Event Flow *\/$/
use_tcp	sampleIM.c	/^Bool use_tcp = False;		\/* Using TCP\/IP Transport or not *\/$/
use_local	sampleIM.c	/^Bool use_local = False;		\/* Using Unix domain Tranport or not *\/$/
filter_mask	sampleIM.c	/^long filter_mask = KeyPressMask;$/
last_icid	sampleIM.c	/^CARD16 last_icid = 0;$/
last_connectid	sampleIM.c	/^CARD16 last_connectid = 0;$/
sampleIM.c:Styles	sampleIM.c	/^static XIMStyle Styles[] = {$/
sampleIM.c:Trigger_Keys	sampleIM.c	/^static XIMTriggerKey Trigger_Keys[] = {$/
sampleIM.c:Conversion_Keys	sampleIM.c	/^static XIMTriggerKey Conversion_Keys[] = {$/
sampleIM.c:Forward_Keys	sampleIM.c	/^static XIMTriggerKey Forward_Keys[] = {$/
sampleIM.c:zhEncodings	sampleIM.c	/^static XIMEncoding zhEncodings[] = {$/
MyGetICValuesHandler	sampleIM.c	/^MyGetICValuesHandler(ims, call_data)$/
MySetICValuesHandler	sampleIM.c	/^MySetICValuesHandler(ims, call_data)$/
MyOpenHandler	sampleIM.c	/^MyOpenHandler(ims, call_data)$/
MyCloseHandler	sampleIM.c	/^MyCloseHandler(ims, call_data)$/
MyCreateICHandler	sampleIM.c	/^MyCreateICHandler(ims, call_data)$/
MyDestroyICHandler	sampleIM.c	/^MyDestroyICHandler(ims, call_data)$/
sampleIM.c:STRBUFLEN	sampleIM.c	137
IsKey	sampleIM.c	/^IsKey(ims, call_data, trigger)$/
ProcessKey	sampleIM.c	/^ProcessKey(ims, call_data)$/
MyForwardEventHandler	sampleIM.c	/^MyForwardEventHandler(ims, call_data)$/
MySetFocusHandler	sampleIM.c	/^MySetFocusHandler(ims, call_data)$/
MyTriggerNotifyHandler	sampleIM.c	/^MyTriggerNotifyHandler(ims, call_data)$/
MyPreeditStartReplyHandler	sampleIM.c	/^MyPreeditStartReplyHandler(ims, call_data)$/
MyPreeditCaretReplyHandler	sampleIM.c	/^MyPreeditCaretReplyHandler(ims, call_data)$/
MyProtoHandler	sampleIM.c	/^MyProtoHandler(ims, call_data)$/
MyXEventHandler	sampleIM.c	/^void MyXEventHandler(im_window, ims, event)$/
main	sampleIM.c	/^main(argc, argv)$/
